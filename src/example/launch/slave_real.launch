<?xml version="1.0"?>
<launch>

  <!-- GDB functionality -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="robot_ip"/>
  <arg name="reverse_ip" default="" doc="IP of the computer running the driver" />
  <arg name="reverse_port" default="50001"/>
  <arg name="limited" default="false"/>
  <arg name="min_payload"  default="0.0"/>
  <arg name="max_payload"  default="3.0"/>
  <arg name="prefix" default="" />
  <arg name="max_velocity" default="1.0"/> <!-- previously 10.0 [rad/s] -->
  <arg name="base_frame" default="$(arg prefix)base" />
  <arg name="tool_frame" default="$(arg prefix)tool0_controller" />
  <arg name="shutdown_on_disconnect" default="true" />
  <arg name="controllers" default="joint_state_controller force_torque_sensor_controller pos_based_pos_traj_controller"/>
  <arg name="stopped_controllers" default="vel_based_pos_traj_controller joint_group_vel_controller"/>
  <arg name="sim" default="false" />

  <!-- Define if we want the master, the slave or both in the same computer -->
  <!-- "master", "slave", "both" -->
  <arg name="position" default="slave" />
  <!-- Define if we want the core nodes (get position, scene, position node) to be grouped -->
  <arg name="is_core_nodes_grouped" default="false" />

  <!-- Define if we want the camera node to be open (if the camera is connected) -->
  <arg name="is_camera_open" default="true" />

  <!-- Define if we want the scale node to be open (if the scale is connected) -->
  <arg name="is_scale_connected" default="true" />

  <!-- Define if we want to display the output of the nodes on screen (development !)-->
  <!-- "screen" or "log"-->
  <arg name="node_output" default="log" />

  <!-- Load hardware interface -->
  <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="log" launch-prefix="$(arg launch_prefix)">
    <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
    <param name="reverse_ip" value="$(arg reverse_ip)"/>
    <param name="reverse_port" type="int" value="$(arg reverse_port)" />
    <param name="min_payload" type="double" value="$(arg min_payload)"/>
    <param name="max_payload" type="double" value="$(arg max_payload)"/>
    <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
    <param name="use_ros_control" type="bool" value="True"/>
    <param name="servoj_gain" type="double" value="750" />
    <param name="prefix" value="$(arg prefix)" />
    <param name="base_frame" type="str" value="$(arg base_frame)"/>
    <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
    <param name="shutdown_on_disconnect" type="bool" value="$(arg shutdown_on_disconnect)"/>
  </node>

  <!-- Load controller settings -->
  <!--rosparam file="$(find ur_modern_driver)/config/ur5_controllers.yaml" command="load"/-->

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
   output="screen" args="$(arg controllers)" />

  <!-- load other controller -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
   output="screen" args="load $(arg stopped_controllers)" />

  <include file="$(find example)/launch/pipeline.launch">
  <arg name="position" value="$(arg position)" />
  <arg name="is_core_nodes_grouped" value="$(arg is_core_nodes_grouped)" />
  <arg name="is_camera_open" value="$(arg is_camera_open)" />
  <arg name="is_scale_connected" value="$(arg is_scale_connected)"/>
  <arg name="node_output" value="$(arg node_output)"/>
  </include>

</launch>
